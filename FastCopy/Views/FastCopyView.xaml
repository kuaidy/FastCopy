<Window x:Class="FastCopy.Views.FastCopyView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FastCopy.Common"
        xmlns:controlEx="clr-namespace:FastCopy.Behaviors" 
        mc:Ignorable="d"
        Icon="../Images/fastcopy.ico"
        Title="FastCopy" Height="600" Width="910" Closing="Window_Closing">
    <Window.Resources>
        <local:BindingProxy x:Key="bindingProxy" Data="{Binding}"></local:BindingProxy>
        <ContextMenu x:Key="cellContextMenu" DataContext="{Binding Data,Source={StaticResource bindingProxy}}">
            <MenuItem Header="选择文件" Command="{Binding Path=SelectFileCommand,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" CommandParameter="{Binding}">
                <MenuItem.Icon>
                    <Image Source="/Images/newfile.png" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="选择目录" Command="{Binding Path=SelectDirCommand,UpdateSourceTrigger=PropertyChanged}">
                <MenuItem.Icon>
                    <Image Source="/Images/folder.png" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="添加FTP目录" Command="{Binding Path=AddFtpPathCommand,UpdateSourceTrigger=PropertyChanged}">
                <MenuItem.Icon>
                    <Image Source="/Images/folder.png" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="打开路径" Command="{Binding Path=OpenDirCommand,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                <MenuItem.Icon>
                    <Image Source="/Images/open.png"/>
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="打开文件" Command="{Binding Path=OpenFileCommand,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
                <MenuItem.Icon>
                    <Image Source="/Images/open.png"/>
                </MenuItem.Icon>
            </MenuItem>
            <!--MenuItem Header="复制" Command="{Binding Path=SelectSourceDirCommand}"></MenuItem>
            <MenuItem Header="剪切" Command="{Binding Path=SelectSourceDirCommand}"></MenuItem>
            <MenuItem Header="粘贴" Command="{Binding Path=SelectSourceDirCommand}"></MenuItem>-->
        </ContextMenu>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="25"></RowDefinition>
            <RowDefinition Height="30"></RowDefinition>
            <RowDefinition></RowDefinition>
            <RowDefinition Height="30"></RowDefinition>
        </Grid.RowDefinitions>
        <Menu Grid.Row="0" VerticalAlignment="Stretch" VerticalContentAlignment="Center" HorizontalContentAlignment="Left">
            <MenuItem Header="设置（O）" HorizontalAlignment="Center" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Height="25" Command="{Binding SetCommand}">
            </MenuItem>
            <MenuItem Header="帮助（H）" HorizontalAlignment="Center" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" Height="25">
                <MenuItem Header="检查更新（U）" Command="{Binding CheckUpdateCommand}"></MenuItem>
                <MenuItem Header="关于（A）"></MenuItem>
            </MenuItem>
        </Menu>
        <ToolBarTray Grid.Row="1">
            <ToolBar>
                <Button Width="25" Height="25" ToolTip="添加" Command="{Binding AddCommand}">
                    <Image Source="/Images/add.png" />
                </Button>
                <Button Width="25" Height="25" ToolTip="修改">
                    <Image Source="/Images/edit.png" />
                </Button>
                <Button Width="25" Height="25" ToolTip="删除" Command="{Binding DelCommand}">
                    <Image Source="/Images/delete.png" />
                </Button>
            </ToolBar>
            <ToolBar>
                <Button Width="25" Height="25" ToolTip="复制" Command="{Binding CopyCommand}">
                    <Image Source="/Images/copy.png" />
                </Button>
                <CheckBox Width="25" Height="25" IsChecked="{Binding AutoIsChecked}">
                    <Image Source="/Images/play.png" ToolTip="自动模式"/>
                </CheckBox>
                <CheckBox Width="25" Height="25" IsChecked="{Binding BakIsChecked}">
                    <Image Source="/Images/bak.png" ToolTip="备份模式"/>
                </CheckBox>
                <CheckBox Width="25" Height="25" IsChecked="{Binding SyncIsChecked}">
                    <Image Source="/Images/sync.png" ToolTip="同步模式"/>
                </CheckBox>
                <CheckBox Width="25" Height="25" IsChecked="{Binding ClockIsChecked}">
                    <Image Source="/Images/clock.png" ToolTip="定时模式"/>
                </CheckBox>
            </ToolBar>
        </ToolBarTray>
        <Popup x:Name="popup" 
               AllowsTransparency="True"
               IsHitTestVisible="False"
               Placement="RelativePoint"
               PlacementTarget="{Binding ElementName=dataGrid}">
            <TextBlock Text="移动..."></TextBlock>
        </Popup>
        <DataGrid Grid.Row="2"
                  x:Name="dataGrid"
                  ItemsSource="{Binding CopyInfos}" 
                  AutoGenerateColumns="False" 
                  CanUserAddRows="False" 
                  CurrentCell="{Binding CurrentCell,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" 
                  BorderBrush="{x:Null}" 
                  BorderThickness="0,0,0,0"
                  controlEx:DragDropRowBehavior.Enabled="True"
                  controlEx:DragDropRowBehavior.PopupControl="{Binding ElementName=popup}"
                  AllowDrop="True">
            <DataGrid.CellStyle>
                <Style TargetType="DataGridCell">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#CDE8FF"></Setter>
                            <Setter Property="BorderBrush" Value="#CDE8FF"></Setter>
                            <Setter Property="Foreground" Value="Black"></Setter>
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="Height" Value="30"></Setter>
                    <Setter Property="VerticalAlignment" Value="Center"></Setter>
                    <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
                </Style>
            </DataGrid.CellStyle>
            <DataGrid.Columns>
                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.Header>
                        <Grid>
                            <CheckBox VerticalAlignment="Center" IsChecked="{Binding Path=DataContext.IsCheckedAll,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                        </Grid>
                    </DataGridTemplateColumn.Header>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                <CheckBox IsChecked="{Binding Path=IsChecked ,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="源地址" Width="300">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid HorizontalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition></ColumnDefinition>
                                    <ColumnDefinition Width="20"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <TextBox Grid.Column="0" controlEx:DragDropRowBehavior.PopupControl="{Binding ElementName=popup}" Text="{Binding Path=SourceAddress, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch" BorderThickness="0" ContextMenu="{StaticResource cellContextMenu}" Width="auto"></TextBox>
                                <Image Grid.Column="1" MaxWidth="15" MaxHeight="15" Source="{Binding Path=ExeIcon}" VerticalAlignment="Center"></Image>
                                <!--<RichTextBox controlEx:DragDropRowBehavior.PopupControl="{Binding ElementName=popup}"  Margin="0" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch" BorderThickness="0" ContextMenu="{StaticResource cellContextMenu}" VerticalAlignment="Center">
                                    <FlowDocument>
                                        <Paragraph>
                                            <Run Text="{Binding Path=SourceAddress, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></Run>
                                            <Image MaxWidth="15" MaxHeight="15" Source="{Binding Path=ExeIcon}" VerticalAlignment="Bottom" Margin="0,-1,0,0"></Image>
                                        </Paragraph>
                                    </FlowDocument>
                                </RichTextBox>-->
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!--<DataGridTextColumn Header="源地址" Binding="{Binding Path=SourceAddress, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></DataGridTextColumn>-->
                <DataGridTemplateColumn Header="目标地址" Width="300">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid HorizontalAlignment="Stretch">
                                <TextBox controlEx:DragDropRowBehavior.PopupControl="{Binding ElementName=popup}" Text="{Binding Path=TargetAddress, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch" BorderThickness="0" ContextMenu="{StaticResource cellContextMenu}"></TextBox>

                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="时间" IsReadOnly="True" Width="130">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid HorizontalAlignment="Stretch">
                                <Label Content="{Binding Path=CopyTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch" BorderThickness="0" ContextMenu="{StaticResource cellContextMenu}"></Label>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="结果" IsReadOnly="True" Width="130">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid HorizontalAlignment="Stretch">
                                <Label Content="{Binding Path=Status, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="0" VerticalContentAlignment="Center" HorizontalContentAlignment="Stretch" BorderThickness="0" ContextMenu="{StaticResource cellContextMenu}"></Label>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
        <!--<StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Center">
            <Label Width="60" Content="源地址" VerticalAlignment="Stretch" VerticalContentAlignment="Center"></Label>
            <TextBox Width="200" VerticalAlignment="Stretch" VerticalContentAlignment="Center" Text="{Binding CopyInfo.SourceAddress}"></TextBox>
            <Button Content="选文件" Width="50" ToolTip="选择文件" Command="{Binding SelectSourceFileCommand}"></Button>
            <Button Content="选目录" Width="50" ToolTip="选择目录" Command="{Binding SelectSourceDirCommand}"></Button>
        </StackPanel>
        <StackPanel Grid.Row="2" Orientation="Horizontal" VerticalAlignment="Center">
            <Label Width="60" Content="目标地址" VerticalContentAlignment="Center"></Label>
            <TextBox Width="200" VerticalContentAlignment="Center" Text="{Binding CopyInfo.TargetAddress}"></TextBox>
            <Button Content="选目录" Width="50" ToolTip="选择目录" Command="{Binding SelectDestDirCommand}"></Button>
        </StackPanel>
        <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Center">
            <Button Content="添加" Command="{Binding AddCommand}"></Button>
            <Button Content="复制" Command="{Binding CopyCommand}"></Button>
            <Button Content="修改" Command="{Binding ModifyCommand}"></Button>
            <Button Content="删除" Command="{Binding DelCommand}"></Button>
            <CheckBox Content="自动模式" VerticalAlignment="Center" IsChecked="{Binding AutoIsChecked}"></CheckBox>
            <CheckBox Content="备份模式" VerticalAlignment="Center" IsChecked="{Binding BakIsChecked}"></CheckBox>
        </StackPanel>-->
        <!--<ListView Grid.Row="2" ItemsSource="{Binding CopyInfos}">-->
        <!--<ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListViewItem">
                                <Grid>
                                    <Grid.Style>
                                        <Style TargetType="Grid">
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="AliceBlue"></Setter>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                    <ContentPresenter SnapsToDevicePixels="True"></ContentPresenter>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ListView.ItemContainerStyle>-->
        <!--<ListView.View>
                <GridView>
                    -->
        <!--<GridView.ColumnHeaderContainerStyle>
                        <Style TargetType="{x:Type GridViewColumnHeader}">
                            <Style.Setters>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="GridViewColumnHeader">
                                            <Grid>
                                                <Grid.Style>
                                                    <Style TargetType="Grid">
                                                        <Style.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background" Value="AliceBlue"></Setter>
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Grid.Style>
                                                <Border>
                                                    <ContentPresenter></ContentPresenter>
                                                </Border>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style.Setters>
                        </Style>
                    </GridView.ColumnHeaderContainerStyle>-->
        <!--
                    <GridView.Columns>
                        <GridViewColumn>
                            <GridViewColumnHeader>
                                <CheckBox></CheckBox>
                            </GridViewColumnHeader>
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <CheckBox IsChecked="{Binding Path=IsChecked}"></CheckBox>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Width="300">
                            <GridViewColumn.HeaderTemplate>
                                <DataTemplate>
                                    <Label Content="源地址"/>
                                </DataTemplate>
                            </GridViewColumn.HeaderTemplate>
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <TextBox Text="{Binding Path=SourceAddress}" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" HorizontalAlignment="Stretch"></TextBox>
                                    </Grid>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="目标地址" Width="300" DisplayMemberBinding="{Binding Path=TargetAddress}">
                            <GridViewColumn.HeaderTemplate>
                                <DataTemplate>
                                    <Label Content="目标地址"/>
                                </DataTemplate>
                            </GridViewColumn.HeaderTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="时间" Width="150" DisplayMemberBinding="{Binding Path=CopyTime}">
                            <GridViewColumn.HeaderTemplate>
                                <DataTemplate>
                                    <Label Content="时间"/>
                                </DataTemplate>
                            </GridViewColumn.HeaderTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="结果" Width="60" DisplayMemberBinding="{Binding Path=Status}">
                            <GridViewColumn.HeaderTemplate>
                                <DataTemplate>
                                    <Label Content="结果"/>
                                </DataTemplate>
                            </GridViewColumn.HeaderTemplate>
                        </GridViewColumn>
                    </GridView.Columns>
                </GridView>
            </ListView.View>
        </ListView>-->
        <StatusBar Grid.Row="5">
            <StatusBarItem>
                <Label Content="{Binding Count}"></Label>
            </StatusBarItem>
            <StatusBarItem>
                <Label Content="{Binding CopyMode}"></Label>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
